project.ext.archiveName = 'purchases_trident_kafka.jar'
project.ext.stormversion = '0.9.3'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.3'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'com.hortonworks'
version = 'Rev1'

description = """Purchases Trident Kafka"""

sourceCompatibility = 1.7
targetCompatibility = 1.7


repositories {
    jcenter()
    maven {
        url = "http://conjars.org/repo"
    }
    maven {
        url = "http://clojars.org/repo"
    }
}

dependencies {
    compile "org.apache.storm:storm-core:${project.ext.stormversion}"
    compile "org.apache.storm:storm-hdfs:${project.ext.stormversion}"
    compile "org.apache.storm:storm-hbase:${project.ext.stormversion}"
    compile "org.apache.storm:storm-kafka:${project.ext.stormversion}"
    compile "org.apache.kafka:kafka_2.10:0.8.1.1"

    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

if (project.ext.properties.containsKey("archiveName")) {
    shadowJar {
        archiveName = "${project.ext.archiveName}"
        destinationDir = new File("${project.projectDir}")
    }
}

task deleteJar(type: Delete) {
    if (project.ext.properties.containsKey("archiveName")) {
        delete "${project.ext.archiveName}"
    }
}

clean.dependsOn(deleteJar)

shadowJar {
    mergeServiceFiles()
    dependencies {
        exclude(dependency("org.apache.storm:storm-core:${project.ext.stormversion}"))
        exclude(dependency("org.slf4j:slf4j-log4j12"))
        exclude(dependency("org.slf4j:slf4j-api"))
        exclude(dependency("org.slf4j:log4j-over-slf4j"))
    }
}

configurations.all {
    exclude module: 'slf4j-log4j12'
}

jar {
    actions = []
    manifest {
        attributes "Main-Class": "com.trident.retail_analysis.RetailAnalysis"
        attributes "Class-Path": configurations.compile.collect { it.absolutePath }.join(" ")
    }
}
jar.dependsOn(shadowJar)
